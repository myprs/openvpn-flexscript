#!/bin/sh


DEBUG=${DEBUG:-0}


usage ()  {

echo "usage: $CALLNAME [-c CONFIGFILE] [-l LOGTAG] "


}


logmessage () {

	# log message
	logger -t "$LOGNAME" "$1"

	# if interactive then write message on stderr
	[ -t 0 ] && echo "\n$1" >&2

	# if return value not zero then exit with return value
	[ $2 -ne 0 ] && exit $2

}


getcheckenvironment () {

	# check if variable dev is set and makes sense
	[ -z "$dev" ] && logmessage "ERROR: variable \"dev\" not set. This script should only called by openvpn. Aborting!" 2
	ip link show "$dev" >/dev/null 2>&1 ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" does not exist. Aborting!" 3
	ip tuntap show | grep -E "^$dev: .*" >/dev/null ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" is not a tun/tap device. Aborting!" 4

	[ -z "$script_type" ] && logmessage "ERROR: variable \"script_type\" not set. This script should only called by openvpn. Aborting!" 5

	# read config
	CONFIGBASE="/etc/ovpnflex"
	CONFIGDIR="$CONFIGBASE/$dev"
	CONFIG=${CONFIG:-"/$CONFIGDIR/ovpnflex.conf"}
	[ $DEBUG -ge 4 ] && echo "DEBUG4: CONFIG set to \"$CONFIG\""
	
	
	[ -f "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not found. Aborting!" 5
	[ -r "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not readable. Aborting!" 6

	. "$CONFIG"

	# set plugin variables
	PLUGDIR="$CONFIGDIR/plugins"
	PLUGDIRBIN="$PLUGDIR/bin"
	PLUGDIRRUNNING="$PLUGDIR/script_type/$script_type"
	[ -d "$PLUGDIRRUNNING" ] || logmessage "ERROR: Plugindir \"$PLUGDIRRUNNING\" not found. Aborting!" 6
	PLUGDIRETC="$PLUGDIR/etc"
	PLUGINPRFX="plug"
	PLUGASSYFILENAME="plugins.assy"
	PLUGASSYFILE="$PLUGASSYFILE/$PLUGASSYFILENAME"
	PLUGASSYLCKNAME="$PLUGASSYNAME.lck"
	PLUGASSYLCKFILE="$PLUGDIRRUNNING/$PLUGASSYLCKNAME"


	# set own environment
	TMPFILE="$1"

	## we already have set CONFIG
	STAGE0USER=${STAGE0USER:-"nobody"}
	STAGE1USER=${STAGE1USER:-"openvpn"}

	DEF_LOGNAME="ovpnflexscript"
	LOGNAME=${LOGNAME:-"$DEF_LOGNAME"}

	MAPDEV2LOGNAME=${MAPDEV2LOGNAME:-0}

	# check environment (-> man openvpn)

	## check STAGE0USER
	# nobody has no rights to query the databases
	if [ "$USER" != "nobody" ] ; 
	then
		getent passwd "$STAGE0USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE0USER\" in variable STAGE0USER does not exist. Aborting!" 7

		## check STAGE1USER
		getent passwd "$STAGE1USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE1USER\" in variable STAGE1USER does not exist. Aborting!" 8
	fi

	# check MAPDEV2LOGNAME
	if [ $MAPDEV2LOGNAME -eq 1 ] ;
	then 
		if [ "$LOGNAME" = "$DEF_LOGNAME" ] ;
		then
			logmessage "ERROR: MAPDEV2LOGNAME = 1 needs LOGNAME to be set differently from default \"$DEF_LOGNAME\". Aborting!" 9
		else
			[ -L "$CONFIGBASE/$LOGNAME"  ] || ln -s "$CONFIGBASE/$dev" "$CONFIGBASE/$LOGNAME"
		fi
	fi

}


plugspresent () {

	# are plugins present in this level?

	find $PLUGDIRRUNNING -name "*.$PLUGINPRFX" -type l | grep "/" >/dev/null

	# grep retruns 0 if plugin link was found
	return $?
}


refresh_plugassy () {
	
	# need to refresh the assy file?

	# any plugins present in this level?
	plugspresent
	[ $? -ne 0 ] && { logmessage "WARNING: no Plugins active for script type \"$script_type\". Nothing to assemble here" 0 ; return 1 ; }

	# should use flock...
	[ -f "$PLUGASSYLCKFILE" ] || touch "$PLUGASSYLCKFILE"

	if [ ! -f $PLUGASSYFILE ] ;
	then 
		logmessage "INFO: initially creating assembly" 0
		cat $PLUGDIRRUNNING/*.$PLUGINPRFX > $PLUGASSYFILE
	else 
		# assy changedate
		CDATE_ASSY=`flock -s $PLUGASSYLCKFILE -c "stat -c %Y -L $PLUGASSYFILE | sort | tail -n 1"`

		# last change date of plugs
		CDATE_PLUGS=`stat -c %Y -L $PLUGDIRRUNNING/*.$PLUGINPRFX | sort | tail -n 1`

		# last change of plugdir
		CDATE_PLUGDIR=`stat -c  %Y -L $PLUGDIRRUNNING`


		if [ $CDATE_ASSY -lt $CDATE_PLUGDIR -o $CDATE_ASSY -lt $CDATE_PLUGS ] ;
		then
			logmessage "INFO: refreshing assembly" 0
			flock -e $PLUGASSYLCK -c "$PLUGDIRRUNNING/*.$PLUGINPRFX > $PLUGASSYFILE"
		fi
	fi 
}

run_plugins () {

	if [ -f $PLUGASSYFILE ] ;
	then
		flock -s $PLUGASSYLCKFILE -c \
			" . $PLUGASSYFILE"
	else
		logmessage "INFO: No plugin asembly found." 0
		return 1
	fi
}


#####################################################
#####################################################


CALLNAME=`basename "$0"`
CALLPATH=`dirname "$0"`




# get commandline options

OPTRSTRING="c:l:"

while getopts "$OPTRSTRING" NEXTOPT ;
 do
        #echo "NEXTOPT:$NEXTOPT"
        #echo "OPTARG:$OPTARG"

        case $NEXTOPT in  
                "c")
			[ -n "$CONFIG" ] && logmessage "ERROR: Parameter -c must only be used once!. Aborting!" 1
                        CONFIG="$OPTARG"
                        ;;
                "l")
			[ -n "$LOGNAME" ] && logmessage "ERROR: Parameter -l must only be used once!. Aborting!" 1
                        LOGNAME="$OPTARG"
                        ;;
                *)
                        usage
                        exit 1
                        ;;
        esac
 done

#echo $OPTIND
shift $(( $OPTIND-1 ))

getcheckenvironment "$1"

# select stage
[ $DEBUG -ge 4 ] && echo "DEBUG4: USER is \"$USER\""

set -xv

case "$USER" in
	"$STAGE0USER")
		# create openvpn tmpfile
		touch "$TMPFILE" || logmessage "ERROR: Could not create temporary file \"$TMPFILE\". Aborting!" 10

		# Run script in next stage, redirct all stdout output into tempfile
		sudo -u "$STAGE1USER" -E "$CALLPATH/$CALLNAME" "$TMPFILE" >"$TMPFILE"
		RETVAL=$?

		# previous scriptlevel did not return 0, remove tmpfile.
		[ $RETVAL -ne 0 ] && rm -f "$TMPFILE"
		exit $RETVAL
		;;
	"$STAGE1USER")

		# do we have plugins?
		plugspresent
		[ $? -ne 0 ] && logmessage "INFO: no plugins in this script_type. Aborting! " 1

		# run the plugins 
		run_plugins
		RETVAL=$?

		# Run script in next stage, redirct all stdout output into tempfile
		sudo -u root -E "$CALLPATH/$CALLNAME" "$TMPFILE"
		RETVAL=$?

		exit $RETVAL
		;;
	"root")
		# run the plugins 
		refresh_plugassy
		run_plugins
		RETVAL=$?

		# previous scriptlevel did not return 0, remove tmpfile.
		exit $RETVAL
		;;
	*)	
		logmessage "ERROR: User \"$USER\" is not assigned to any stage. Aborting!" 50
		;;
esac
