#!/bin/sh


DEBUG=${DEBUG:-0}


usage ()  {

echo "usage: $CALLNAME [-c CONFIGFILE] [-l LOGTAG] "


}


logmessage () {

	# $1 must be the message
	[ -z "$1" ] && exit 999
	LOGMESSAGE="$1"

	# $2 might be the exitcode, defaults to0
	EXITCODE=${2:-0}
	#MESSAGEID="3ceed9d62892402e91aaf50af2dced3c"
	MESSAGEID=`printf "3ceed9d62892402e91aaf50af2dc%04x" $EXITCODE `

	# $3 might be the severity, defaults to 0
	# must be 0..7 (emerg..debug) see man syslog -> level 
	# default is 1 (info)
	if [ $EXITCODE -eq 0 ] ; then
		# if exitcode = 0 then severity defaults to 1 (info)
		SEVERITY=${3:-1}
	else
		# if exitcode <> 0 then severity defaults to 4 (error)
		SEVERITY=${3:-4}
	fi

	# log message
	case $LOG2SYSTEMD in
		0)
			#log to syslog
			logger -t "$LOGTAG" "#$dev@$script_type&$common_name: $LOGMESSAGE"
			;;
		1)
			# log to systemd
			logger --journald <<eolog
MESSAGE_ID=$MESSAGEID
MESSAGE=$LOGMESSAGE
ERRNO=$EXITCODE
PRIORITY=$SEVERITY
SYSLOG_IDENTIFIER="$LOGTAG"
eolog

			;;
		*)
			# error
			;;
	esac

	# if interactive then write message on stderr
	[ -t 0 ] && echo "\n$LOGMESSAGE" >&2

	# if return value not zero then exit with return value
	[ $EXITCODE -ne 0 ] && exit $EXITCODE

}


getcheckenvironment () {

	# check if variable dev is set and makes sense
	[ -z "$dev" ] && logmessage "ERROR: variable \"dev\" not set. This script should only called by openvpn. Aborting!" 2
	ip link show "$dev" >/dev/null 2>&1 ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" does not exist. Aborting!" 3
	ip tuntap show | grep -E "^$dev: .*" >/dev/null ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" is not a tun/tap device. Aborting!" 4

	[ -z "$script_type" ] && logmessage "ERROR: variable \"script_type\" not set. This script should only called by openvpn. Aborting!" 5

	# read config
	CONFIGBASE="/etc/openvpn-flexscript"
	CONFIGDIR="$CONFIGBASE/$dev"
	CONFIG=${CONFIG:-"$CONFIGDIR/openvpn-flex.conf"}
	[ $DEBUG -ge 4 ] && echo "DEBUG4: CONFIG set to \"$CONFIG\""
	
	
	[ -f "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not found. Aborting!" 5
	[ -r "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not readable. Aborting!" 6

	. "$CONFIG"

	# set plugin variables
	PLUGDIR="$CONFIGDIR/plugins"
	PLUGDIRBIN="$PLUGDIR/bin"
	PLUGDIRRUNNING="$PLUGDIR/script_type/$script_type"
	[ -d "$PLUGDIRRUNNING" ] || logmessage "ERROR: Plugindir \"$PLUGDIRRUNNING\" not found. Aborting!" 6
	PLUGDIRETC="$PLUGDIR/etc"
	PLUGINPRFX="plug"
	PLUGASSYFILENAME="plugins.assy"
	PLUGASSYFILE="$PLUGDIRRUNNING/$PLUGASSYFILENAME"
	PLUGASSYLCKNAME="$PLUGASSYFILENAME.lck"
	PLUGASSYLCKFILE="$PLUGDIRRUNNING/$PLUGASSYLCKNAME"


	# set own environment
	OVPNTMPFILE="$1"

	# if user variable is not set, set it.
	[ -z "$USER" ] && USER=`whoami`

	## we already have set CONFIG
	STAGE0USER=${STAGE0USER:-"nobody"}
	STAGE1USER=${STAGE1USER:-"openvpn"}

	# logging
	LOG2SYSTEMD=${LOGTO:-1} 
	DEF_LOGTAG="openvpn-flexscript"
	LOGTAG=${LOGTAG:-"$DEF_LOGTAG"}


	# create a softlink in the confdir, mapping the devie directory to the logtag
	# 0 no, 1=yes
	MAPDEV2LOGTAG=${MAPDEV2LOGTAG:-0}

	# check environment (-> man openvpn)

	## check STAGE0USER
	# nobody has no rights to query the databases
	if [ "$USER" != "nobody" ] ; 
	then
		getent passwd "$STAGE0USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE0USER\" in variable STAGE0USER does not exist. Aborting!" 7

		## check STAGE1USER
		getent passwd "$STAGE1USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE1USER\" in variable STAGE1USER does not exist. Aborting!" 8
	fi

	# check MAPDEV2LOGTAG
	if [ $MAPDEV2LOGTAG -eq 1 ] ;
	then 
		if [ "$LOGTAG" = "$DEF_LOGTAG" ] ;
		then
			logmessage "ERROR: MAPDEV2LOGTAG = 1 needs LOGTAG to be set differently from default \"$DEF_LOGTAG\". Aborting!" 9
		else
			[ -L "$CONFIGBASE/$LOGTAG"  ] || ln -s "$CONFIGBASE/$dev" "$CONFIGBASE/$LOGTAG"
		fi
	fi

}


plugspresent () {

	# are plugins present in this level?

	find $PLUGDIRRUNNING -name "*.$PLUGINPRFX" -type l | grep "/" >/dev/null

	# grep retruns 0 if plugin link was found
	return $?
}


refresh_plugassy () {
	
	# need to refresh the assy file?

	# any plugins present in this level?
	plugspresent
	[ $? -ne 0 ] && { logmessage "WARNING: no Plugins active for script type \"$script_type\". Nothing to assemble here" 0 ; return 1 ; }

	# use flock...
	if [ -f "$PLUGASSYLCKFILE" ] ;
	then
		touch "$PLUGASSYLCKFILE"
		chown root:"$STAGE1USER" "$PLUGASSYLCKFILE"
		chmod 660 "$PLUGASSYLCKFILE"
		chown root:"$STAGE1USER" `dirname "$PLUGASSYLCKFILE"`
		chmod 770 `dirname "$PLUGASSYLCKFILE"`
	fi


	if [ ! -f $PLUGASSYFILE ] ;
	then 
		logmessage "INFO: initially creating assembly" 0
		cat $PLUGDIRRUNNING/*.$PLUGINPRFX > $PLUGASSYFILE
		chown root:"$STAGE1USER" "$PLUGASSYFILE"
		chmod 750 "$PLUGASSYFILE"
	else
		# assy changedate
		CDATE_ASSY=`flock -s $PLUGASSYLCKFILE stat -c %Y -L $PLUGASSYFILE | sort | tail -n 1 `

		# last change date of plugs
		CDATE_PLUGS=`stat -c %Y -L $PLUGDIRRUNNING/*.$PLUGINPRFX | sort | tail -n 1`

		# last change of plugdir
		CDATE_PLUGDIR=`stat -c  %Y -L $PLUGDIRRUNNING`


		if [ $CDATE_ASSY -lt $CDATE_PLUGDIR -o $CDATE_ASSY -lt $CDATE_PLUGS ] ;
		then
			logmessage "INFO: refreshing assembly" 0
			flock -e "$PLUGASSYLCKFILE" cat "$PLUGDIRRUNNING"/*.$PLUGINPRFX > "$PLUGASSYFILE"
			chown root:"$STAGE1USER" "$PLUGASSYFILE"
			chmod 750 "$PLUGASSYFILE"
		fi
	fi 

}

run_plugins () {

	if [ -f $PLUGASSYFILE ] ;
	then
		PLUGRET=0
		(
			flock -w 45  9 || return 99
			 . $PLUGASSYFILE
		) 9>"$PLUGASSYLCKFILE"
		return $PLUGRET
	else
		logmessage "INFO: No plugin asembly found." 0
		return 1022
	fi
}


#####################################################
#####################################################


CALLNAME=`basename "$0"`
CALLPATH=`dirname "$0"`




# get commandline options

OPTRSTRING="c:l:"

while getopts "$OPTRSTRING" NEXTOPT ;
 do
        #echo "NEXTOPT:$NEXTOPT"
        #echo "OPTARG:$OPTARG"

        case $NEXTOPT in  
                "c")
			[ -n "$CONFIG" ] && logmessage "ERROR: Parameter -c must only be used once!. Aborting!" 1
                        CONFIG="$OPTARG"
                        ;;
                "l")
			[ -n "$LOGTAG" ] && logmessage "ERROR: Parameter -l must only be used once!. Aborting!" 1
                        LOGTAG="$OPTARG"
                        ;;
                *)
                        usage
                        exit 1
                        ;;
        esac
 done

#echo $OPTIND
shift $(( $OPTIND-1 ))

getcheckenvironment "$1"

# select stage
[ $DEBUG -ge 4 ] && echo "DEBUG4: USER is \"$USER\""


case "$USER" in
	"$STAGE0USER")
		
		if [ -z "$OVPNTMPFILE" ] ;
		then 
			# no tempfile requested 

			# Run script in next stage
			sudo -u "$STAGE1USER" -g "$STAGE1USER" -E "$CALLPATH/$CALLNAME" "$OVPNTMPFILE" 
			RETVAL=$?
		else 
			# create openvpn tmpfile, as requested
			touch "$OVPNTMPFILE" || logmessage "ERROR: Could not create temporary file \"$OVPNTMPFILE\". Aborting!" 10

			# Run script in next stage, redirct all stdout output into tempfile
			sudo -u "$STAGE1USER" -g "$STAGE1USER" -E "$CALLPATH/$CALLNAME" "$OVPNTMPFILE" >"$OVPNTMPFILE"
			RETVAL=$?
		fi

		# previous scriptlevel did not return 0, remove tmpfile.
		[ $RETVAL -ne 0 ] && rm -f "$OVPNTMPFILE"
		exit $RETVAL
		;;
	"$STAGE1USER")

		# do we have plugins?
		plugspresent
		[ $? -ne 0 ] && logmessage "INFO: no plugins in this script_type. Aborting! " 1

		# run the plugins 
		run_plugins
		PLUGRETVAL=$?
		[ $PLUGRETVAL -ne 0 -a $PLUGRETVAL -ne 1022 ] && logmessage "ERROR: Aborting stage 1 due to plugin error." $PLUGRETVAL 

		# Run script in next stage
		sudo -u root -g root -E "$CALLPATH/$CALLNAME" "$OVPNTMPFILE"
		RETVAL=$?

		# fail if we did not run our own stage plugins due to missing assembly
		[ $PLUGRETVAL -eq 1022 ] && return 1022
		exit $RETVAL
		;;
	"root")
		# run the plugins 
		refresh_plugassy
		run_plugins
		RETVAL=$?

		# previous scriptlevel did not return 0, remove tmpfile.
		exit $RETVAL
		;;
	*)	
		logmessage "ERROR: User \"$USER\" is not assigned to any stage. Aborting!" 50
		;;
esac
