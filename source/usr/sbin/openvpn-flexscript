#!/bin/sh


DEBUG=${DEBUG:-0}


usage ()  {

echo "usage: $CALLNAME [-c CONFIGFILE] [-l LOGTAG] "


}


cleanup () {

	[ -n "$OVPNTMPFILEKEEP" ] && [ $OVPNTMPFILEKEEP -eq 0 ] && rm "$OVPNTMPFILE"
}


logmessage () {

	# $1 must be the message
	[ -z "$1" ] && exit 999
	LOGMESSAGE="$1"

	# $2 might be the exitcode, defaults to0
	EXITCODE=${2:-0}
	#MESSAGEID="3ceed9d62892402e91aaf50af2dced3c"
	MESSAGEID=`printf "3ceed9d62892402e91aaf50af2dc%04x" $EXITCODE `

	# $3 might be the severity, defaults to 0
	# must be 0..7 (emerg..debug) see man syslog -> level 
	# default is 1 (info)
	if [ $EXITCODE -eq 0 ] ; then
		# if exitcode = 0 then severity defaults to 1 (info)
		SEVERITY=${3:-1}
	else
		# if exitcode <> 0 then severity defaults to 4 (error)
		SEVERITY=${3:-4}
	fi

	# log message
	case $LOG2SYSTEMD in
		0)
			#log to syslog
			logger -t "$LOGTAG" "#$dev@$script_type&$common_name: $LOGMESSAGE"
			;;
		1)
			# log to systemd
			logger --journald <<eolog
MESSAGE_ID=$MESSAGEID
MESSAGE=$LOGMESSAGE
ERRNO=$EXITCODE
PRIORITY=$SEVERITY
SYSLOG_IDENTIFIER="$LOGTAG"
eolog

			;;
		*)
			# error
			;;
	esac

	# if interactive then write message on stderr
	[ -t 0 ] && echo "\n$LOGMESSAGE" >&2

	# if return value not zero then exit with return value
	if [ $EXITCODE -ne 0 ] ;
	then 
		cleanup
		exit $EXITCODE
	fi

}


check_cn_characterset () {

	# Expects common name is $1
	# Checks if the string just contains expected characters. OpenVPN and openssl support complete UTF-8
	# and since 2.4 character remapping is deprecated. Nevertheless these scripts use the strings in a 
	# simplistic manner, feding it directly to programs, interpreting the string as RegExp. This can lead from
	# unexpected behaviour to security risks. By limiting the allowed character set, we minimise this 
	# risk.

	[ -n "$1" ] && echo "$1" | grep -E '^[-._@a-zA-ZäÄöÖüÜß0-9]*$' >/dev/null || logmessage "ERROR: Common Name \"$1\" contains illegal characters. Please use characters out of [-._@a-zA-ZäÄöÖüÜß0-9]. Aborting! " 18

}

getcheckenvironment () {

	# check if variable dev is set and makes sense
	[ -z "$dev" ] && logmessage "ERROR: variable \"dev\" not set. This script should only called by openvpn. Aborting!" 2
	ip link show "$dev" >/dev/null 2>&1 ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" does not exist. Aborting!" 3
	ip tuntap show | grep -E "^$dev: .*" >/dev/null ; [ $? -ne 0 ] && logmessage "ERROR: Interface \"$dev\" is not a tun/tap device. Aborting!" 4

	[ -z "$script_type" ] && logmessage "ERROR: variable \"script_type\" not set. This script should only called by openvpn. Aborting!" 5

	# read config
	CONFIGBASE="/etc/openvpn-flexscript"
	CONFIGDIR="$CONFIGBASE/$dev"
	CONFIG=${CONFIG:-"$CONFIGDIR/openvpn-flex.conf"}
	[ $DEBUG -ge 4 ] && echo "DEBUG4: CONFIG set to \"$CONFIG\""
	
	
	[ -f "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not found. Aborting!" 5
	[ -r "$CONFIG" ] || logmessage "ERROR: Config file \"$CONFIG\" not readable. Aborting!" 6

	. "$CONFIG"

	# set plugin variables
	PLUGDIR="$CONFIGDIR/plugins"
	PLUGDIRBIN="$PLUGDIR/bin"
	PLUGDIRRUNNING="$PLUGDIR/script_type/$script_type"
	[ -d "$PLUGDIRRUNNING" ] || logmessage "ERROR: Plugindir \"$PLUGDIRRUNNING\" not found. Aborting!" 7
	PLUGDIRETC="$PLUGDIR/etc"
	PLUGINPRFX="plug"
	MODULEDIRETC="$PLUGDIR/etc"
	MODULEPRFX="module"
	PLUGASSYFILENAME="plugins.assy"
	PLUGASSYFILE="$PLUGDIRRUNNING/$PLUGASSYFILENAME"
	PLUGASSYLCKNAME="$PLUGASSYFILENAME.lck"
	PLUGASSYLCKFILE="$PLUGDIRRUNNING/$PLUGASSYLCKNAME"


	# if user variable is not set, set it.
	[ -z "$USER" ] && USER=`whoami`

	## we might already have set this in CONFIG
	STAGE0USER=${STAGE0USER:-"nobody"}
	STAGE1USER=${STAGE1USER:-"openvpn"}

	# set own environment


	# logging
	LOG2SYSTEMD=${LOGTO:-1} 
	DEF_LOGTAG="openvpn-flexscript"
	LOGTAG=${LOGTAG:-"$DEF_LOGTAG"}


	case "$script_type" in
		"up")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"tls-verify")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"ipchange")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"client-connect")
			OVPNTMPFILE="$1"
			check_cn_characterset "$common_name"
			;;
		"route-up")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"route-pre-down")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"client-disconnect")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"down")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"learn-address")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		"auth-user-pass-verify")
			OVPNTMPFILE="/tmp/openvpn-flexscript-$$.tmp"
			OVPNTMPFILEKEEP=0
			;;
		*)	
			logmessage "ERROR: unknown script_type: \"$script_type\". Aborting!" 8
			;;
	esac

	# do not try to remove TMP-File if we are not running under original user
	[ "$USER" = "$STAGE0USER" ] && OVPNTMPFILEKEEP=1
	[ "$USER" = "$STAGE1USER" ] && OVPNTMPFILEKEEP=1

	# create a softlink in the confdir, mapping the devie directory to the logtag
	# 0 no, 1=yes
	MAPDEV2LOGTAG=${MAPDEV2LOGTAG:-0}

	NEEDROOT=${NEEDROOT:-1}

	# check environment (-> man openvpn)

	## check STAGE0USER
	# nobody has no rights to query the databases
	if [ "$USER" != "nobody" ] ; 
	then
		getent passwd "$STAGE0USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE0USER\" in variable STAGE0USER does not exist. Aborting!" 9

		## check STAGE1USER
		getent passwd "$STAGE1USER" >/dev/null ; [ $? -eq 0 ] || logmessage "ERROR: User \"$STAGE1USER\" in variable STAGE1USER does not exist. Aborting!" 10
	fi

	# check MAPDEV2LOGTAG
	if [ $MAPDEV2LOGTAG -eq 1 ] ;
	then 
		if [ "$LOGTAG" = "$DEF_LOGTAG" ] ;
		then
			logmessage "ERROR: MAPDEV2LOGTAG = 1 needs LOGTAG to be set differently from default \"$DEF_LOGTAG\". Aborting!" 11
		else
			[ -L "$CONFIGBASE/$LOGTAG"  ] || ln -s "$CONFIGBASE/$dev" "$CONFIGBASE/$LOGTAG"
		fi
	fi

}


plugspresent () {

	# are plugins present in this level?

	# search plugin links 
	find $PLUGDIRRUNNING -name "*.$PLUGINPRFX" -type l | grep "/" >/dev/null
	local RETVAL=$?

	#search module links
	find $PLUGDIRRUNNING -name "*.$MODULEPRFX" -type l | grep "/" >/dev/null
	RETVAL=$(( $RETVAL + $? ))

	# grep retruns 0 if plugin link was found
	return $?
}


check_plugassy () {

	# assy available?
	[ -r "$PLUGASSYLCKFILE" ] || return 1

	# assy changedate
	CDATE_ASSY=`flock -s $PLUGASSYLCKFILE stat -c %Y -L $PLUGASSYFILE | sort | tail -n 1 `

	# last change date of plugs
	CDATE_PLUGS=`stat -c %Y -L $PLUGDIRRUNNING/*.$PLUGINPRFX $PLUGDIRRUNNING/*.$MODULEPRFX | sort | tail -n 1`

	# did last command return values?
	[ -z "$CDATE_PLUGS" ] && return 1

	# last change of plugdir
	CDATE_PLUGDIR=`stat -c  %Y -L $PLUGDIRRUNNING`

	# did last command return values?
	[ -z "$CDATE_PLUGDIR" ] && return 1


	if [ $CDATE_ASSY -lt $CDATE_PLUGDIR ] || [ $CDATE_ASSY -lt $CDATE_PLUGS ] ;
	then
		# we need to update
		return 1
	else
		# no update needed
		return 0
	fi

}

refresh_plugassy () {
	
	# need to refresh the assy file?

	# any plugins present in this level?
	plugspresent
	[ $? -ne 0 ] && { logmessage "WARNING: no Plugins active for script type \"$script_type\". Nothing to assemble here" 0 ; return 1 ; }

	# use flock...
	if [ -f "$PLUGASSYLCKFILE" ] ;
	then
		if [ "$USER" = "root" ] ; 
		then 
			touch "$PLUGASSYLCKFILE" \
				|| logmessage "ERROR: Could not create temporary file PLUGASSYLCKFILE \"$PLUGASSYLCKFILE\". Aborting!" 11

			chown root:"$STAGE1USER" "$PLUGASSYLCKFILE" \
				|| logmessage "ERROR: Cannot change ownership on \"$PLUGASSYLCKFILE\". Maybe missing CAP_CHOWN on service?" 12
			chmod 660 "$PLUGASSYLCKFILE"
			chown root:"$STAGE1USER" `dirname "$PLUGASSYLCKFILE"` \
				|| logmessage "ERROR: Cannot change ownership on \"`dirname $PLUGASSYLCKFILE`\". Maybe missing CAP_CHOWN on service?" 13
 
			chmod 770 `dirname "$PLUGASSYLCKFILE"`
		else
			NEEDROOT=$(($NEEDROOT+1))
		fi

	fi

	if [ ! "`stat -c "%u:%g" "$PLUGASSYLCKFILE"`" = "root:$STAGE1USER" ] ;
	then
		if [ "$USER" = "root" ] ;
		then
			NEEDROOT=$(($NEEDROOT+1))
		else
			chown root:"$STAGE1USER" "$PLUGASSYLCKFILE" \
				|| logmessage "ERROR: Cannot change ownership on \"$PLUGASSYLCKFILE\". Maybe missing CAP_CHOWN on service?" 14

			chmod 660 "$PLUGASSYLCKFILE"
			chown root:"$STAGE1USER" `dirname "$PLUGASSYLCKFILE"` \
				|| logmessage "ERROR: Cannot change ownership on directory \"`dirname $PLUGASSYLCKFILE`\". Maybe missing CAP_CHOWN on service?" 15

			chmod 770 `dirname "$PLUGASSYLCKFILE"`
		fi
	fi


	if [ ! -f $PLUGASSYFILE ] ;
	then 
		logmessage "INFO: initially creating assembly (script_type: $script_type)" 0
		cat $PLUGDIRRUNNING/*.$MODULEPRFX $PLUGDIRRUNNING/*.$PLUGINPRFX > $PLUGASSYFILE
		chown root:"$STAGE1USER" "$PLUGASSYFILE" || logmessage "DEBUG: Error5" 0

		chmod 750 "$PLUGASSYFILE"
		return 1
	else
		check_plugassy
		if [ $? -eq 1 ] ;
		then
			logmessage "INFO: refreshing assembly (script_type: $script_type)" 0
			flock -e "$PLUGASSYLCKFILE" cat "$PLUGDIRRUNNING"/*.$MODULEPRFX "$PLUGDIRRUNNING"/*.$PLUGINPRFX > "$PLUGASSYFILE"
			chown root:"$STAGE1USER" "$PLUGASSYFILE" || logmessage "DEBUG: Error6" 0

			chmod 750 "$PLUGASSYFILE"
			return 2
		fi
	fi 
	return 0

}

run_plugins () {

	if [ -f $PLUGASSYFILE ] ;
	then
		PLUGRET=0
		(
			flock -w 45  9 || return 99
			 . $PLUGASSYFILE
		) 9>"$PLUGASSYLCKFILE"
		return $PLUGRET
	else
		logmessage "INFO: No plugin asembly found." 0
		return 1022
	fi
}


#####################################################
#####################################################


CALLNAME=`basename "$0"`
CALLPATH=`dirname "$0"`




# get commandline options

OPTRSTRING="c:l:"

while getopts "$OPTRSTRING" NEXTOPT ;
 do
        #echo "NEXTOPT:$NEXTOPT"
        #echo "OPTARG:$OPTARG"

        case $NEXTOPT in  
                "c")
			[ -n "$CONFIG" ] && logmessage "ERROR: Parameter -c must only be used once!. Aborting!" 1
                        CONFIG="$OPTARG"
                        ;;
                "l")
			[ -n "$LOGTAG" ] && logmessage "ERROR: Parameter -l must only be used once!. Aborting!" 1
                        LOGTAG="$OPTARG"
                        ;;
                *)
                        usage
                        exit 1
                        ;;
        esac
 done

#echo $OPTIND
shift $(( $OPTIND-1 ))


# Assign more positional parameters as different openvpn hooks use different number of parameters:
#
# script hook			Mode	param1		param2			param3			param4		Retval <> 0
# ----------------------------------------------------------------------------------------------------------------------------------
# --up				sc	path to file	„init“|“restart“						log
# --tls-verify			s	path to file	certificate_depth	subject					log
# --ipchange			c	path to file	ip_address		port_number				log
# --client-connect		s	path to file									refuse client
# --route-up			sc	path to file									log
# --route-pre-down		sc	path to file									log
# --client-disconnect		s	path to file									log
# --down			sc	path to file									log
# --learn-address		s	path to file	OP: add|update|delete	address: IP(4|6)	common name	log
# --auth-user-pass-verify	s	path to file									log
#
#
# Please see --up-restart for different behaviour of the --up and --down parameter.
# Please see --down-pre for different behaviour of the --down
#


logger "DEBUG: Script call \"$1\" \"$2\" \"$3\" \"$4\"; cn: \"$common_name\"; script_type: \"$script_type\" " 

OVPN_PARAM1=${1:-""}
OVPN_PARAM2=${2:-""}
OVPN_PARAM3=${3:-""}
OVPN_PARAM4=${4:-""}


getcheckenvironment "$1"

# select stage
[ $DEBUG -ge 4 ] && echo "DEBUG4: USER is \"$USER\""

DECONFIGURE=0


case "$USER" in
	"$STAGE0USER")
		
		# create openvpn tmpfile, as requested
		touch "$OVPNTMPFILE" || logmessage "ERROR: Could not create temporary file OVPNTMPFILE \"$OVPNTMPFILE\". Aborting!" 10

		# Run script in next stage, redirct all stdout output into tempfile
		sudo -u "$STAGE1USER" -g "$STAGE1USER" -E "$CALLPATH/$CALLNAME" "$OVPN_PARAM1" "$OVPN_PARAM2" "$OVPN_PARAM3" "$OVPN_PARAM4" >"$OVPNTMPFILE"
		RETVAL=$?

		# previous scriptlevel did not return 0, remove tmpfile.
		[ $RETVAL -ne 0 ] && rm -f "$OVPNTMPFILE"

		cleanup

		exit $RETVAL
		;;
	"$STAGE1USER")

		# do we have plugins?
		plugspresent
		[ $? -ne 0 ] && logmessage "INFO: no plugins in this script_type. Aborting! " 1

		# are we deconfiguring?
		if [ $script_type = "down" ] || [ $script_type = "client-disconnect" ] || [ $script_type = "ipchange" ] ;
		then
			DECONFIGURE=1
		fi


		check_plugassy
		PLUGASSY_NEEDS_UPDATE=$?
		PLUGRETVAL=0
		# check if we refuse to configure (only on "configuration creation"; on configuration destruction we need to run anyway to deconfigure as much as possible)
		if [ $PLUGASSY_NEEDS_UPDATE -eq 0 ] || [ $DECONFIGURE -ne 0 ] ;
		then
			# run the plugins 
			run_plugins
			PLUGRETVAL=$?
			[ $PLUGRETVAL -ne 0 -a $PLUGRETVAL -ne 1022 ] && logmessage "ERROR: Aborting stage 1 due to plugin error." $PLUGRETVAL 
		fi

		# Run script in next stage, but only if requested by plugin or assembly refresh is needed
		if [ $NEEDROOT -ne 0 ] || [$PLUGASSY_NEEDS_UPDATE -eq 1 ]  ;
		then
			sudo -u root -g root -E "$CALLPATH/$CALLNAME" "$OVPN_PARAM1" "$OVPN_PARAM2" "$OVPN_PARAM3" "$OVPN_PARAM4"
			RETVAL=$?
		fi

		# fail if we did not run our own stage plugins due to missing assembly
		[ $PLUGRETVAL -eq 1022 ] && return 1022

		# fail if we did not run our own stage plugins because they were outdated
		[ $PLUGASSY_NEEDS_UPDATE -eq 1 ] && return 1023

		cleanup

		exit $RETVAL
		;;
	"root")
		# are we deconfiguring?
		if [ $script_type = "down" ] || [ $script_type = "client-disconnect" ] || [ $script_type = "ipchange" ] ;
		then
			DECONFIGURE=1
		fi

		# run the plugins 
		refresh_plugassy
		RETVAL=$?

		if [ $RETVAL -eq 0 ] || [ $DECONFIGURE -ne 0 ] ;
		then
			# we need to run the plugins
			run_plugins
			# previous scriptlevel did not return 0, remove tmpfile.
			exit $?
		else
			if [ $RETVAL -le 2 ] ;
			then
				logmessage "INFO: Assembly rewritten. Trying to restart process!" $RETVAL
			else 
				logmessage "ERROR: Refreshing assembly did fail. " 89
			fi
		fi

		cleanup

		exit 0

		;;
	*)	
		logmessage "ERROR: User \"$USER\" is not assigned to any stage. Aborting!" 50
		cleanup
		;;
esac
